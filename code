import pandas as pd
import numpy as np
import matplotlib as mlp
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
%matplotlib inline
%matplotlib notebook
import animatplot as amp
import matplotlib.animation as animation
import gif

df = pd.read_csv("https://raw.github.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv")

#TO CHANGE the data format
m=0
df['data_nuova'] = df['data'][0][0:10]
m+=1
while m<len(df.data):
    df['data_nuova'][m] = df['data'][m][0:10]
    m+=1
#to see how many swabs everyday
l=0
df['tamponi_quotidiani'] = df['tamponi'][l]
l=1
while l<len(df.data):
    df['tamponi_quotidiani'][l] = df['tamponi'][l]-df['tamponi'][l-1]
    l +=1
#to see how many recovered everyday
z=0
df['nuovi_guariti'] = df['dimessi_guariti'][z]
z=1
while z<len(df.tamponi):
    df['nuovi_guariti'][z] = df['dimessi_guariti'][z]-df['dimessi_guariti'][z-1]
    z +=1
#to see how many death every day
n=0
df['nuovi_deceduti'] = df['deceduti'][n]
n=1
while n<len(df.tamponi):
    df['nuovi_deceduti'][n] = df['deceduti'][n]-df['deceduti'][n-1]
    n +=1
    

df.drop(['data','stato','note'], axis = 1, inplace = True)
df.columns
#ordering how I prefer
df = df[['data_nuova','ricoverati_con_sintomi', 'terapia_intensiva','ingressi_terapia_intensiva', 'totale_ospedalizzati',
       'isolamento_domiciliare', 'totale_positivi','variazione_totale_positivi','dimessi_guariti',
       'deceduti', 'totale_casi', 'nuovi_positivi', 'tamponi', 'tamponi_quotidiani', 'nuovi_guariti',
         'nuovi_deceduti', 'casi_testati','casi_da_sospetto_diagnostico', 'casi_da_screening']]
 
#quanti tamponi al giorno risultano positivi
df['%tp'] = df['variazione_totale_positivi']/df['tamponi_quotidiani']*100
#df['%tp'][0] =  df['totale_positivi'][0]/df['tamponi_quotidiani'][0]*100 per mettere al primo NON zero
#df.head()

#rename columns for thesis -----------ATTENTION FOR GRAPHS THAT HAVE THE NAMES OF COLUMNS OLDER
df1 = df.rename(columns={"data_nuova": "Date", "ricoverati_con_sintomi": "Hs", "terapia_intensiva": 'Hic', 
                         "ingressi_terapia_intensiva": "dHic",
                         "totale_ospedalizzati": "H", "isolamento_domiciliare": "I", "totale_positivi": "P",
                         "variazione_totale_positivi": "dP", "dimessi_guariti": "R", "deceduti":"D", "totale_casi": "N", 
                         "nuovi_positivi":"dN","tamponi": "S", "tamponi_quotidiani":"dS", "nuovi_guariti":"dR",
                         "nuovi_deceduti": "dD","casi_testati" : "tc","%tp":"%sp" })
          
          
          
#to see how many tested cases every day
df1['dtc'] = 'NaN'
k=56
while k<len(df1.Date):
    df1['dtc'][k] = df1['tc'][k]-df1['tc'][k-1]
    k +=1
    
    
#set the variable data from x
x = df1["Date"]
converted_dates = mlp.dates.datestr2num(x)
data = (converted_dates)


df1['lethality'] = df1['D']/df1['N']
df1.lethality.describe()

x = df1['lethality']
t = data

#lethality
let = df1.lethality
fig = plt.figure(figsize= (15,5))
plt.plot_date(data, let, '.', color='r')
fig.suptitle('lethality rate in Italy')
plt.xlabel('date')
plt.ylabel('percentage')
plt.xticks(rotation=45)
plt.grid()
#plt.savefig('asdf.jpg')

#TOTAL CASES IN ITALY
tc = df1.N

fig = plt.figure(figsize=(13,7))
plt.plot_date(data, tc, '.', color='g', linewidth=3, label='Pandemic Curve')
fig.suptitle('Total Cases in Italy')
plt.xlabel('date')
plt.ylabel('cumulative cases')
plt.xticks(rotation=45)
plt.legend()
plt.grid()
#plt.savefig('asdf.jpg')

START = pd.Timestamp("2020-02-24")
END = pd.Timestamp("2021-01-04")

casi = tc
df = pd.DataFrame(
    {
        "date": pd.date_range(start=START, end=END),
        "cases": tc,
    }
)


@gif.frame
def plot(date):
    d = df[df["date"] <= date]
    fig, ax = plt.subplots(figsize=(15, 10), dpi=80)
    plt.plot(d["date"], d["cases"])
    ax.set_xlim([START, END])
    ax.set_xticks([date])
    ax.set_yticks([0, 100000])
    ax.set_xticklabels([date.strftime("%b '%y")])
    plt.grid()
    #ax.set_yticklabels([0, 1000, 10000, 100000, 1000000, "cases"])


frames = []
for date in df["date"]:
    frame = plot(date)
    frames.append(frame)

gif.save(frames, "casi_totali.gif", duration=35)

#daily total CASES IN ITALY
dtc = df1.dN
fig = plt.figure(figsize= (13,7))
plt.plot_date(data, dtc, '.-.', color='g', linewidth=3)
fig.suptitle('Daily total cases in Italy')
plt.xlabel('date')
plt.ylabel('daily cases')
plt.xticks(rotation=45)
plt.grid()
#plt.savefig('asdf.jpg')

START = pd.Timestamp("2020-02-24")
END = pd.Timestamp("2021-01-04")

casiquot = dtc
df = pd.DataFrame(
    {
        "date": pd.date_range(start=START, end=END),
        "cases": dtc,
    }
)


@gif.frame
def plot(date):
    d = df[df["date"] <= date]
    fig, ax = plt.subplots(figsize=(15, 10), dpi=80)
    plt.plot(d["date"], d["cases"])
    ax.set_xlim([START, END])
    ax.set_xticks([date])
    ax.set_yticks([0, 10000])
    ax.set_xticklabels([date.strftime("%b '%y")])
    #ax.set_yticklabels()
    plt.grid()


frames = []
for date in df["date"]:
    frame = plot(date)
    frames.append(frame)

gif.save(frames, "casi_giornalieri.gif", duration=35)

#daily positive people IN ITALY
tp1 = df1[df1['dP']>=0].dP
tp2 = df1[df1['dP']<0].dP
fig = plt.figure()

#date
d1= df1[df1['dP']>=0].Date
converted_dates = mlp.dates.datestr2num(d1)
data1 = (converted_dates)

d2 = df1[df1['dP']<0].Date
converted_dates = mlp.dates.datestr2num(d2)
data2 = (converted_dates)


fig = plt.figure(figsize=(13,8))
plt.plot_date(data1, tp1, '.', color='r',label = 'increasing currently Positives', markersize = 10)
plt.plot_date(data2, tp2, '.', color='g', label = ' decreasing currently Positives', markersize = 10)
fig.suptitle('Daily positive cases in Italy', fontsize = 20)
plt.xlabel('date', fontsize = 20)
plt.ylabel('daily positive cases', fontsize = 20)
plt.xticks(rotation=45)
plt.grid()
plt.legend(prop={'size': 15})

mlp.rc('xtick', labelsize=10) 
mlp.rc('ytick', labelsize=10)
#plt.savefig('asdf.jpg')

#ANDAMENTO TERAPIA INTENSIVA - Ricoverati con sintomi ed ospedalizzati totali
t = df1.ingressi_terapia_intensiva
r = df1.Hs
o = df1.H



fig = plt.figure(figsize=(10,8))
plt.plot_date(data, t, '-', color='r', label = 'intensive care')
plt.plot_date(data, r, '-', color='b', label = 'hospitalised with syntomps')
plt.plot_date(data, o, '-', color='g',  label = 'total hospitalised')
fig.suptitle('Situation in hospitals in Italy', fontsize= 20)
plt.xlabel('date', fontsize=15)
plt.ylabel('Absolute numbers', fontsize=15)
plt.xticks(rotation=45)
plt.legend(loc= 1, fontsize= 14)
plt.grid()
#plt.savefig('asdf.jpg')
i = df1.I
h = df1.H
a = df1.P

fig = plt.figure(figsize=(10,8))
plt.plot_date(data, h, '-', color='r', label = 'hospitalised')
plt.plot_date(data, i, '-', color='g', label = 'home isolated')
plt.plot_date(data, a, '-', color='b',  label = 'total currently positive')
fig.suptitle('Situation in Italy - Hospitalised and Home isolated', fontsize = 20)
plt.xlabel('date', fontsize = 15)
plt.ylabel('Absolute numbers', fontsize = 15)
plt.xticks(rotation=45)
plt.legend(loc= 2, fontsize = 14)
plt.grid()

fig = plt.figure(figsize=(10,8))
plt.plot_date(data, t, '-', color='r', label = 'intensive care')
plt.plot_date(data, r, '-', color='m', label = 'hospitalised with syntomps')
plt.plot_date(data, o, '-', color='g',  label = 'total hospitalised')
plt.plot_date(data, h, '-', color='c', label = 'hospitalised')
plt.plot_date(data, i, '-', color='b', label = 'home isolated')
plt.plot_date(data, a, '-', color='y',  label = 'total currently positive')
fig.suptitle('Situation in Italy - full comparison', fontsize = 20)
plt.xlabel('date', fontsize = 15)
plt.ylabel('Absolute numbers', fontsize = 15)
plt.xticks(rotation=45)
plt.legend(loc= 2, fontsize = 14)
plt.grid()


x = df1['%sp']
y = df1['dS']

fig = plt.figure(figsize = (10,8))
plt.plot_date(data, x, '.', color='r', label = '% of positive people out of total tests', markersize=6)

fig.suptitle('finding positives')
plt.xlabel('date')
plt.ylabel('percentages')
plt.xticks(rotation=45)
plt.legend(loc= 2)
plt.grid()

fig = plt.figure(figsize = (10,8))
plt.plot_date(data, y, '.', color='g', label = 'tests', markersize=4)

fig.suptitle('tests done')
plt.xlabel('date')
plt.ylabel('absolute numbers')
plt.xticks(rotation=45)
plt.legend(loc= 2)
plt.grid()

df1['%Intensive_care_H'] = df1['Hic']/df1['H']*100
df1['%OnlyHospital_H'] = 100- abs(df1['%Intensive_care_H'])

x = df1['%Intensive_care_H']

fig = plt.figure(figsize = (10,8))
plt.plot_date(data, x, '-', color='r', label = '% of people in Intensive care')

fig.suptitle('Situation in Italy - Intensive care pressure')
plt.xlabel('date')
plt.xticks(rotation=45)
plt.legend(loc= 2)
plt.grid()

x = df1['dR']
y = df1['dD']

fig = plt.figure(figsize = (10,5))
plt.plot_date(data, x, '.', color='g', label = 'Daily recovered')


fig.suptitle('Death and recovered')
plt.xlabel('date')
plt.ylabel('percentages')
plt.xticks(rotation=45)
plt.legend(loc= 2)
plt.grid()

fig = plt.figure(figsize = (10,5))

plt.plot_date(data, y, '.', color='r', label = 'Daily dead')

fig.suptitle('Death and recovered')
plt.xlabel('date')
plt.ylabel('numbers')
plt.xticks(rotation=45)
plt.legend(loc= 2)
plt.grid()

fig = plt.figure(figsize = (10,5))
plt.plot_date(data, x, '.', color='g', label = 'Daily recovered')
plt.plot_date(data, y, '.', color='r', label = 'Daily dead')

fig.suptitle('Death and recovered')
plt.xlabel('date')
plt.ylabel('numbers')
plt.xticks(rotation=45)
plt.legend(loc= 2)
plt.grid()

x = df1['casi_da_sospetto_diagnostico']
y = df1['casi_da_screening']

fig = plt.figure(figsize = (10,6))
plt.plot_date(data, x, '.-.', color='y', label = 'Casi da tampone')
plt.plot_date(data, y, '.-.', color='c', label = 'Casi da indagine sierologica')

fig.suptitle('tamponi e sierologici')
plt.xlabel('date')
plt.ylabel('percentages')
plt.xticks(rotation=45)
plt.legend(loc= 2)
plt.grid()

